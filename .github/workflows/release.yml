name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (e.g., 1.2.3) - required if type is custom'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  # =================================================================
  # Job 1: Version, Build, and Tag
  # =================================================================
  release:
    name: üöÄ Version and Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      timestamp: ${{ steps.build_info.outputs.timestamp }}
      artifact-name: ${{ steps.build_info.outputs.artifact-name }}
      previous-tag: ${{ steps.previous_tag.outputs.previous_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install git-cliff
        uses: taiki-e/install-action@git-cliff

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Get previous tag
        id: previous_tag
        run: |
          PREVIOUS_TAG=$(git tag | grep -v "snapshot" | sort -V | tail -n 1 || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Create Release, Changelog, and Next Snapshot
        id: version
        run: |
          # --- 1. Bump version to the final release number ---
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          if [[ "$VERSION_TYPE" == "custom" ]]; then
            if [ -z "$CUSTOM_VERSION" ]; then
              echo "Error: A custom version must be provided." && exit 1
            fi
            npm version --no-git-tag-version "$CUSTOM_VERSION"
          else
            npm version --no-git-tag-version "$VERSION_TYPE"
          fi
          RELEASE_VERSION=$(node -p "require('./package.json').version")
          TAG="v$RELEASE_VERSION"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          # --- 2. Generate Changelogs ---
          git-cliff ${{ steps.previous_tag.outputs.previous_tag }}..HEAD --strip header --output release-notes.md
          HEADER="## [$RELEASE_VERSION](${{ github.server_url }}/${{ github.repository }}/compare/${{ steps.previous_tag.outputs.previous_tag }}...$TAG) - $(date +'%Y-%m-%d')"
          {
            echo "$HEADER"
            echo ""
            cat release-notes.md
            echo ""
            echo ""
            cat CHANGELOG.md
          } > temp_changelog.md && mv temp_changelog.md CHANGELOG.md

          # --- 3. Commit the release (version bump + changelog) and tag it ---
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): version $RELEASE_VERSION"
          git tag -a "$TAG" -m "Release $TAG"

          # --- 4. Commit the next snapshot version ---
          npm version --no-git-tag-version patch
          NEXT_VERSION=$(node -p "require('./package.json').version")
          SNAPSHOT_VERSION="$NEXT_VERSION-SNAPSHOT"
          npm version --no-git-tag-version "$SNAPSHOT_VERSION"
          git add package.json package-lock.json
          git commit -m "chore(release): prepare for next development iteration"

          # --- 5. Push all changes ---
          git push --follow-tags

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

      - name: Build production application from tag
        run: |
          echo "Checking out tag ${{ steps.version.outputs.tag }} to build artifact..."
          git checkout ${{ steps.version.outputs.tag }}
          echo "Running npm ci for the release version..."
          npm ci
          echo "Building application..."
          npx ng build --configuration production

      - name: Prepare build information
        id: build_info
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          ARTIFACT_NAME="porturl-frontend-${{ steps.version.outputs.tag }}.zip"
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Archive production build
        run: |
          cd dist/porturl-frontend
          zip -r ../../${{ steps.build_info.outputs.artifact-name }} .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ steps.build_info.outputs.artifact-name }}
          retention-days: 7

  # =================================================================
  # Job 2: Build and Push Docker Image
  # =================================================================
  docker:
    name: üê≥ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up QEMU & Docker Buildx
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Docker tags
        id: docker_tags
        run: |
          IMAGE_NAME="friesoft/porturl-frontend"
          VERSION="${{ needs.release.outputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"

          TAGS="$IMAGE_NAME:$VERSION"

          if [ "$IS_PRERELEASE" != "true" ]; then
            TAGS="$TAGS,$IMAGE_NAME:latest"
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1,2)
            TAGS="$TAGS,$IMAGE_NAME:$MAJOR_MINOR"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Docker tags: $TAGS"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=porturl-frontend
            org.opencontainers.image.version=${{ needs.release.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ needs.release.outputs.timestamp }}

  # =================================================================
  # Job 3: Create GitHub Release
  # =================================================================
  github-release:
    name: üì¶ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release, docker]
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: build-artifact
          path: .

      - name: Download release notes
        uses: actions/download-artifact@v5
        with:
          name: release-notes
          path: .

      - name: Read changelog file content
        id: changelog_content
        run: |
          echo 'changelog<<EOF' >> "$GITHUB_OUTPUT"
          cat release-notes.md >> "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.release.outputs.tag }}
          name: "üöÄ Release ${{ needs.release.outputs.tag }}"
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          body: |
            **Built:** `${{ needs.release.outputs.timestamp }}`

            ## üê≥ Docker Image

            `docker pull friesoft/porturl-frontend:${{ needs.release.outputs.version }}`

            ---

            ## Changes
            ${{ steps.changelog_content.outputs.changelog }}
          artifacts: "${{ needs.release.outputs.artifact-name }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: ${{ github.event.inputs.prerelease != 'true' }}
