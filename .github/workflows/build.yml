name: Build

on:
  pull_request:
    branches: ['**']
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  # =================================================================
  # Job 1: Run Tests and Check Code Coverage
  # This job runs on every push and pull request to ensure code quality.
  # =================================================================
  test:
    name: üß™ Test and Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          # Use npm's cache for faster dependency installation.
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        # --watch=false and --browsers=ChromeHeadless are essential for CI environments.
        run: npx ng test --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Add coverage comment to PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.1
        with:
          lcov-file: ./coverage/porturl-frontend/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title: 'Code Coverage Report'

  # =================================================================
  # Job 2: Build and Push Docker Image
  # This job runs only on pushes to the 'main' branch after tests have passed.
  # It leverages the multi-stage Dockerfile to build the production image.
  # =================================================================
  docker:
    name: üê≥ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    # Define outputs that can be used by subsequent jobs (e.g., the release job).
    outputs:
      version: ${{ steps.build_info.outputs.version }}
      timestamp: ${{ steps.build_info.outputs.timestamp }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare build information
        id: build_info
        # Extracts the version from package.json and gets the current timestamp.
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        # Required for building multi-platform Docker images.
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # A Docker CLI plugin for extended build capabilities.
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # IMPORTANT: You must configure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN in your repository secrets.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Docker tags
        id: docker_tags
        run: |
          # CHANGE THIS: Update with your Docker Hub username/organization.
          IMAGE_NAME="friesoft/porturl-frontend"
          TAGS="$IMAGE_NAME:snapshot,$IMAGE_NAME:main-${{ github.sha }}"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          # Use GitHub Actions cache for Docker layers to speed up subsequent builds.
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add OCI labels to the image for better metadata.
          labels: |
            org.opencontainers.image.title=porturl-frontend
            org.opencontainers.image.version=${{ steps.build_info.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.build_info.outputs.timestamp }}

  # =================================================================
  # Job 3: Create a GitHub Snapshot Release
  # This job creates a pre-release on GitHub tagged 'snapshot' with the source code.
  # =================================================================
  release-snapshot:
    name: üöÄ Create Snapshot Release
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create source code zip
        # Creates a zip of the source code, excluding build artifacts and git history.
        run: zip -r porturl-frontend-src.zip . -x ".git/*" "node_modules/*" "dist/*" "coverage/*"

      - name: Remove old snapshot prerelease
        # Deletes the previous 'snapshot' release to keep things clean.
        run: |
          if gh release view snapshot --repo $GITHUB_REPOSITORY >/dev/null 2>&1; then
            gh release delete snapshot --cleanup-tag --yes --repo $GITHUB_REPOSITORY
          fi
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"

      - name: Create snapshot prerelease
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "snapshot"
          prerelease: true
          name: "Development Build (Snapshot)"
          body: |
            ## üöß Development Build from main branch

            **Commit:** `${{ github.sha }}`
            **Version:** `${{ needs.docker.outputs.version }}`
            **Built:** `${{ needs.docker.outputs.timestamp }}`

            ### üì¶ Available Downloads
            - Source code (`porturl-frontend-src.zip`)

            ### üê≥ Docker Images
            ```bash
            # Pull the latest snapshot image
            docker pull friesoft/porturl-frontend:snapshot

            # Pull the commit-specific image
            docker pull friesoft/porturl-frontend:main-${{ github.sha }}
            ```
          artifacts: "porturl-frontend-src.zip"
          allowUpdates: true
