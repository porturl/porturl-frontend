name: Build

on:
  pull_request:
    branches: ['**']
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  # =================================================================
  # Job 1: Run Tests and Check Code Coverage
  # =================================================================
  test:
    name: üß™ Test and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install lcov for coverage reporting
        # The reporting action requires the lcov package to be installed.
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Run tests with coverage
        run: npx ng test --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Report code coverage
        if: github.event_name == 'pull_request'
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          coverage-files: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          minimum-coverage: 80
          title-prefix: "Code Coverage Report"

  # =================================================================
  # Job 2: Build Production Artifact (for GitHub Releases)
  # This job's sole purpose is to create the .zip file for the release.
  # =================================================================
  build_artifact:
    name: üèóÔ∏è Build Release Artifact
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.build_info.outputs.version }}
      timestamp: ${{ steps.build_info.outputs.timestamp }}
      artifact-name: ${{ steps.build_info.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production application
        run: npx ng build --configuration production

      - name: Prepare build information
        id: build_info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          ARTIFACT_NAME="porturl-frontend-v${VERSION}.zip"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Archive production build
        run: |
          cd dist/porturl-frontend
          zip -r ../../${{ steps.build_info.outputs.artifact-name }} .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ steps.build_info.outputs.artifact-name }}
          retention-days: 7

  # =================================================================
  # Job 3: Build and Push Docker Image (from source)
  # This job builds the Docker image from source, ensuring local builds work.
  # =================================================================
  docker:
    name: üê≥ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Depends only on tests, can run in parallel with build_artifact
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        # We check out the full source for the multi-stage Docker build
        uses: actions/checkout@v4

      - name: Set up QEMU & Docker Buildx
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Docker tags
        id: docker_tags
        run: |
          IMAGE_NAME="friesoft/porturl-frontend"
          TAGS="$IMAGE_NAME:snapshot,$IMAGE_NAME:main-${{ github.sha }}"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=porturl-frontend
            org.opencontainers.image.version=${{ needs.build_artifact.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ needs.build_artifact.outputs.timestamp }}

  # =================================================================
  # Job 4: Create a GitHub Snapshot Release
  # =================================================================
  release-snapshot:
    name: üöÄ Create Snapshot Release
    runs-on: ubuntu-latest
    needs: [build_artifact, docker] # Depends on both builds completing
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Create source code zip
        run: zip -r porturl-frontend-src.zip . -x ".git/*" "node_modules/*" "dist/*" "coverage/*"

      - name: Remove old snapshot prerelease
        run: |
          if gh release view snapshot --repo $GITHUB_REPOSITORY >/dev/null 2>&1; then
            gh release delete snapshot --cleanup-tag --yes --repo $GITHUB_REPOSITORY
          fi
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"

      - name: Create snapshot prerelease
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "snapshot"
          prerelease: true
          name: "Development Build (Snapshot)"
          body: |
            ## üöß Development Build from main branch

            **Commit:** `${{ github.sha }}`
            **Version:** `${{ needs.build_artifact.outputs.version }}`
            **Built:** `${{ needs.build_artifact.outputs.timestamp }}`

            ### üì¶ Available Downloads
            - **Build Artifact:** `${{ needs.build_artifact.outputs.artifact-name }}`
            - **Source Code:** `porturl-frontend-src.zip`

            ### üê≥ Docker Images
            ```bash
            # Pull the latest snapshot image
            docker pull friesoft/porturl-frontend:snapshot

            # Pull the commit-specific image
            docker pull friesoft/porturl-frontend:main-${{ github.sha }}
            ```
          artifacts: "${{ needs.build_artifact.outputs.artifact-name }},porturl-frontend-src.zip"
          allowUpdates: true
